// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model ExternalLink {
  id        Int     @id @default(autoincrement())
  channelId Int
  avatarUrl String?
  url       String
  shortname String? // ví dụ: "twitter", "facebook", "instagram"
  channel   Channel @relation(fields: [channelId], references: [id])
}

model Channel {
  id            Int            @id @default(autoincrement())
  userId        Int            @unique
  followers     Int            @default(0)
  description   String?        @db.LongText
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  minReceive    Int            @default(8000)
  user          User           @relation("UserChannel", fields: [userId], references: [id])
  externalLinks ExternalLink[]
}

model User {
  id        Int      @id @default(autoincrement())
  lastname  String
  firstname String
  username  String   @unique
  email     String   @unique
  channel   String?  @unique
  verified  Boolean  @default(false)
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  avatar    String?
  banner    String?

  channelRef Channel?    @relation("UserChannel")
  points     UserPoint[]
  themeId    Int?
  theme      Theme?      @relation(fields: [themeId], references: [id])

  @@fulltext([firstname, lastname, email, channel])
}

model Wallet {
  userId  Int     @id
  user    User    @relation(fields: [userId], references: [id])
  balance Decimal @default(0) @db.Decimal(20, 2)
}

model Subscription {
  id           Int      @id @default(autoincrement())
  subscription Int
  userId       Int      @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model UserPoint {
  id        Int      @id @default(autoincrement())
  userId    Int
  points    Int
  reason    String // ví dụ: "donation", "redemption", "bonus"
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Setting {
  id    Int    @id @default(autoincrement())
  key   String @unique
  value String
}

//
// --- THEME ---
//
model Theme {
  id   Int    @id @default(autoincrement())
  name String @unique

  users User[]
}
