// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model ExternalLink {
  id        Int     @id @default(autoincrement())
  channelId Int
  avatarUrl String?
  url       String
  shortname String? // ví dụ: "twitter", "facebook", "instagram"
  channel   Channel @relation(fields: [channelId], references: [id])
}

model Channel {
  id            Int            @id @default(autoincrement())
  userId        Int            @unique
  followers     Int            @default(0)
  description   String?        @db.LongText
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  minReceive    Int            @default(8000)
  user          User           @relation("UserChannel", fields: [userId], references: [id])
  externalLinks ExternalLink[]
}

model User {
  id        Int      @id @default(autoincrement())
  lastname  String
  firstname String
  username  String   @unique
  email     String   @unique
  channel   String?  @unique
  verified  Boolean  @default(false)
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  avatar    String?
  banner    String?

  channelRef Channel? @relation("UserChannel")

  wallet            Wallet?
  sentDonations     Donation[] @relation("DonationSender")
  receivedDonations Donation[] @relation("DonationReceiver")

  @@fulltext([firstname, lastname, email, channel])
}

model Wallet {
  userId  Int @id
  balance Int @default(0)

  user         User                @relation(fields: [userId], references: [id])
  transactions WalletTransaction[]
}

model Donation {
  id        Int      @id @default(autoincrement())
  amount    Int
  message   String?
  createdAt DateTime @default(now())

  senderId Int
  sender   User @relation("DonationSender", fields: [senderId], references: [id])

  receiverId Int
  receiver   User @relation("DonationReceiver", fields: [receiverId], references: [id])

  // liên kết đến giao dịch trong ví nếu cần
  senderTransactionId   Int?
  receiverTransactionId Int?
}

model WalletTransaction {
  id          Int               @id @default(autoincrement())
  walletId    Int
  wallet      Wallet            @relation(fields: [walletId], references: [userId])
  type        TransactionType
  amount      Int
  status      TransactionStatus @default(PENDING)
  referenceId Int? // Liên kết Donation hoặc giao dịch ngoài
  externalRef String? // Mã giao dịch từ momo / bank
  note        String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

enum TransactionType {
  DEPOSIT // nạp tiền
  WITHDRAW // rút tiền
  DONATE_SENT // gửi donate
  DONATE_RECEIVED // nhận donate
  REFUND // hoàn tiền
}

enum TransactionStatus {
  PENDING
  SUCCESS
  FAILED
  CANCELLED
}

model Subscription {
  id           Int      @id @default(autoincrement())
  subscription Int
  userId       Int      @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
